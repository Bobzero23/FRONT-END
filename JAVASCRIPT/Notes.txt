+ For the best practice put the script code at the bottome of the body of the html file

** TRUTHY AND FALSY
+ check the code for more information

ARRAYS
+ push -> method to add element to thes to array (it returns the size of an array)
Note: Not like java you can put different data types to this array
+ pop -> removing the last element of the array and returns it.
+ shift
+ unshift
+ concat
+ reverse
+ slice(?start, ?end)
Note: is not necessary to put both 'start' and 'end', and the '?' means optional but if you don't put anything
it will return the copy of that array, it always includes the start but not the end.
+ splice(start, howManyToDelete, 'smthToAdd') -> to put in betwween (original destructive)
+ sort -> converting every element of arrya to its UTF-16 code value and sort accordingly
Note: the sorting method it doesn't work like the other programming languages
Note: It's normal to use 'const' because we dont change the reference we just change the context.
Note: arrays can also arrays inside and also objects

OBJECTS 
+ property = key : value
Note: we gonna need to use the key to get our value back


LOOPS 
+ for...of this is a new to javascript as I am watching 25-May-2023 (you can check the examples)


BLOCK SCOPE
+ if you create a variable using the 'let' keyword in a block, then it will only be reachable inside that block
+ if you create a variable using the 'var' keyword in a block, then it will be reachable everywhere unless that block is function

LEXICAL SCOPE
+ In Js you can have nested functions which can have access to their parents properties

FUNCTION EXPRESSION 
+ creating a function with a variable e.g  const add = funtion() {}

MAP FUNCTION 
+ This one iterates through the whole element and returns whatever the logic you wanna do with them in a different array which you defined

HIGHER ORDER FUNCTIONS
+ These are just functions that accepts other functions as argument and return a function

ARROW FUNCTION 
+ helps us to create a function without using the function keyword but we have to assign it to a variable
+ if you use '()' instead of '{}' arrow function will return itself, you don't have to write the return keyword also it must be one liner


SET TIMEOUT & SET INTERVAL
** setTimeout() -> this function takes two parameters the first one is a function and the second one is  time to wait for that function to be executed
** setInterval() -> this one will keep running the give function in the given interval untll you stop the function itself, and this function gives us an 'id', so store the id of the function to a variable and use that id as the paramter of 'clearInterval(id)' function just like this.

FILTER FUNCTION
+ This one iterates trough the whole elements and returns only the elements that matches the condition 

EVERY & SOME
** EVERY -> returns 'true' if all the elements matches the condition else it returns 'false'
** SOME -> return 'true' if any of the element matches the condtion other wise it returns 'false'

IMPORTANT: 'This' keyword behaves different in 'Arrow function' and in 'Normal function'

DEFAULT PARAMS
+ initializing the paramters just incase the user won't pass the parameters of a method 
+ this is how you do it in the paramters (a = 5, b = 3) simply as that

SPREAD
+ you can do anything yo want to iterables like this [...array] or [..."string"] or [...object]
+ you will use this in copying stuffs and more in REACT

REST PARAMS
+ you create your function paramter just like this (...nums) and whatever you add as an argument 
will be put into array

DESTRUCTURING ARRAY
+ let's say you hane an array called nums to assign its element to varaible you just do it like this 
instead of using the tradition way 'cost [gold, silver, bronze] = nums' remember the order matters

DESTRUCTURING OBJECTS
+ same idea as destructing arrays and this is the syntax of it
+ const {keyName: variableName} = objectName; that is it

DOM (Document Object Model)
+ console.dir(document) -> to see all the Js objects

SELECTING 
+ GetElementById
+ GetElementByTagName
+ GetElementByClassName

SELECTORS
+ querySelector('#p')
Note: note this one returns the first one available in the html and not all of them


STYLE
+ they are on camel cased 
+ everything shall be in quotes (string)
Note: this will not give you the style in the css, but will give you the inline and js style.

COMPUTED STYLE
+ window.getComputedStyle('tag').fontSize or whatever, this is how you do it...
+ whatever you apply shall be in the "quotes" ulness if it's an array

GET ATTRIBUTE
+ to check if there is an attribute what you are looking for in the tag
Note: prefer class list instead of this

SET ATTRIBUTE
+ to set/add attribute to a particular tag
+ this one takes two arguments 'the attribute you wanna add' and 'the name of the attribute'
Note: prefer class list instead of this

CLASS LIST
+ an easy way to add and remove classes
** here are some useful methods (add, remove, contains, toggle)
+ toggle() this is a useful method of do and undo

PARENT ELEMENT
+ giving us the parent of the provided tag

CHILDREN
+ giving us the number of children of the parent

CREATE ELEMENT
+ This is a way of creating  a new element

APPEND CHILD
+ this is a way of adding a new element to e.g document.body.appendChild('name of the element you created') 

APPEND
+ this one is more flexible we can add (text, more than one element)
Note: this one add to the end of the parentNode


PREPEND
+ this one works as APPEND but it adds to the beginning of the parentNode

ISNERT ADJACENT ELEMENT
+ this one allows us to add element between two elemnts, it takes two arguments

REMOVE
+ for removing selected tag or element

ADD EVENT LISTENER
+ Takes two pareamter, the first one is the event and the
 second one is the function which you want to happpen when the even is triggered


 KEY UP & KEY DOWN
 + decting when a key is pressed
 Note: wath more on #Keyboard Events

 PREVENT DEFAULT 
 + to avoid the default event, ex. when there is no page to go after submission


 INPUT VALUE
 + a method to get the value of the input

 INPUT
 + any time you put the value in which makes a change in you input it will be detected, is useful
 + use this as your first paramter of addEventListener


 CALL BACKS 
 + is like when you have a funciton which shall only run after a function, like when you nest them 
 Note: prefer PROMISES


 PROMISES
 + Makes call backs way more cleaner and readable using 'then' and 'catch' keywords
 + it has three states (pending, resolved and rejected)

 ASYNC KEYWORD
 + When you use this keyword with a function, that function will automatically return a 'PROMISE'
 + in this case, promise can only be rejected if we 'throw' an error 


 JSON.parse
 + changing a Json format to a Javascript object literals

 JSON.stringify
 + changin a Javascript object literals to Json format

 STATUS CODE, QUERIES, HEADERS
 + Nothing I am not familiar with

 FETCH API
 + is just one of the good way working with endpoints in Javascript using 'fetch' method
 Note: fetch method may return the response with no body of the json so to return it,
  use the 'json()' function which also returns a promise with json data which we can display 


AXIOS 
+ a third part libarary, you need to import it or download it before starting to work with it
+ A better way of using fetch api because it will return a full body with no empty body 
like we experienced in fetch api
Note: there is a way of dealing with headers, check the code for more information